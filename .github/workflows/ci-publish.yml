name: CI and Publish

on:
  push:
    branches: [master, main]
    tags: ["v*"]
  pull_request:
    branches: [master, main]
  workflow_dispatch:
    inputs:
      force_publish:
        description: 'Force publish to npm'
        required: false
        default: 'false'

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write

jobs:
  build-and-test:
    name: Test & Build (Node ${{ matrix.node }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: [20, 22]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: npm

      - name: Install
        run: npm ci

      - name: Lint
        run: npm run lint || echo "No lint script, skipping."

      - name: Test
        run: npm test || echo "No test script, skipping."

      - name: Verify CLI
        run: |
          echo "Testing CLI functionality..."
          node cli.js --json > test-output.json
          echo "CLI JSON output generated successfully"

          # Verify JSON output contains expected fields
          node -e "
            const data = require('./test-output.json');
            if (!data.profile || !data.projects || !data.skills) {
              console.error('Missing required data fields');
              process.exit(1);
            }
            console.log('✓ CLI JSON output validated');
          "

      - name: Verify Package
        run: |
          # Create and pack the tarball
          PKG_TARBALL=$(npm pack --json | jq -r '.[0].filename')
          echo "Generated tarball: $PKG_TARBALL"

          # Verify tarball contents
          echo "Tarball contents:"
          tar -tf "$PKG_TARBALL"

          echo ""
          echo "Verifying required files..."

          # Store contents to avoid broken pipe issues
          CONTENTS=$(tar -tf "$PKG_TARBALL" 2>/dev/null)

          # Check each file safely
          echo "$CONTENTS" | grep -q "package/cli.js" && echo "✓ Found cli.js" || { echo "✗ Missing cli.js"; exit 1; }
          echo "$CONTENTS" | grep -q "package/index.js" && echo "✓ Found index.js" || { echo "✗ Missing index.js"; exit 1; }
          echo "$CONTENTS" | grep -q "package/lib/data.js" && echo "✓ Found lib/data.js" || { echo "✗ Missing lib/data.js"; exit 1; }
          echo "$CONTENTS" | grep -q "package/package.json" && echo "✓ Found package.json" || { echo "✗ Missing package.json"; exit 1; }

          echo "Tarball contents verified!"

          # Set up temporary install directory
          mkdir -p tmp-install
          cd tmp-install

          # Initialize and install the tarball
          npm init -y >/dev/null 2>&1
          npm install "../$PKG_TARBALL" >/dev/null 2>&1

          # Verify installation
          echo "Installed files in node_modules/kebal:"
          if [ -d "node_modules/kebal" ]; then
            ls -la node_modules/kebal
            echo ""
            echo "Testing CLI execution..."
            ./node_modules/.bin/kebal --json >/dev/null && echo "✓ CLI executable works" || { echo "✗ CLI execution failed"; exit 1; }
          else
            echo "Directory not found"
            exit 1
          fi

          echo "🎉 All package verification tests passed!"
        shell: bash

      - name: Upload Artifacts
        if: matrix.node == '22'
        uses: actions/upload-artifact@v4
        with:
          name: package-node${{ matrix.node }}
          path: |
            cli.js
            index.js
            lib/
            package.json
            README.md
          if-no-files-found: error
          retention-days: 7

  validate-build:
    name: Validate Build
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install
        run: npm ci

      - name: Verify Files
        run: |
          for file in cli.js index.js lib/data.js package.json; do
            [ -f "$file" ] || { echo "Missing $file"; exit 1; }
          done
          echo "All required files present."

      - name: Show Package Info
        run: |
          echo "Package size:"
          du -h *.js lib/ README.md package.json | sort -h
          echo ""
          echo "Package.json info:"
          jq '{name, version, bin, main, description}' package.json

      - name: Test CLI functionality
        run: |
          echo "Testing CLI with --json flag..."
          node cli.js --json | jq '.profile.fullName' || { echo "CLI JSON test failed"; exit 1; }
          echo "✓ CLI functionality verified"

  publish:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: [build-and-test, validate-build]
    # Run on tags starting with 'v' OR on master branch pushes
    if: startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/master'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: https://registry.npmjs.org
          cache: npm

      - name: Install
        run: npm ci

      - name: Final CLI Test
        run: node cli.js --json >/dev/null

      - name: Extract version
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            # Extract version from tag (v1.0.4 -> 1.0.4)
            VERSION=${GITHUB_REF#refs/tags/v}
            echo "Publishing from tag v$VERSION"
          else
            # Extract version from package.json for branch pushes
            VERSION=$(jq -r '.version' package.json)
            echo "Publishing from branch, version: $VERSION"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Verify version
        run: |
          PACKAGE_VERSION=$(jq -r '.version' package.json)
          EXTRACTED_VERSION="${{ steps.version.outputs.VERSION }}"
          echo "Package.json version: $PACKAGE_VERSION"
          echo "Extracted version: $EXTRACTED_VERSION"
          
          if [ "$PACKAGE_VERSION" != "$EXTRACTED_VERSION" ]; then
            echo "Version mismatch: package.json=$PACKAGE_VERSION, extracted=$EXTRACTED_VERSION"
            exit 1
          fi
          echo "✅ Version verified: $PACKAGE_VERSION"

      - name: Check if version already exists
        run: |
          PACKAGE_VERSION="${{ steps.version.outputs.VERSION }}"
          echo "Checking if kebal@$PACKAGE_VERSION already exists on npm..."
          
          if npm view kebal@$PACKAGE_VERSION version >/dev/null 2>&1; then
            echo "❌ Version $PACKAGE_VERSION already exists on npm!"
            echo "Please bump the version number before publishing."
            echo "Run: npm version patch && git push origin master --tags"
            exit 1
          else
            echo "✅ Version $PACKAGE_VERSION is available for publishing"
          fi

      - name: Check NPM Token & User
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          if [ -z "${{ secrets.NPM_TOKEN }}" ]; then
            echo "❌ NPM_TOKEN secret is not set!"
            echo "Please add NPM_TOKEN to repository secrets"
            exit 1
          fi
          echo "✅ NPM_TOKEN is configured"
          
          echo "Checking npm user..."
          npm whoami || { echo "❌ Token authentication failed"; exit 1; }
          
          echo "Checking package access..."
          npm access list packages || echo "Warning: Could not list packages"
          
          echo "Checking kebal package ownership..."
          npm owner list kebal || echo "Warning: Could not check kebal ownership"

      - name: Publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          echo "Publishing kebal@${{ steps.version.outputs.VERSION }}..."
          echo "Note: If this fails with OTP error, you need an Automation token from npmjs.com"
          npm publish --access public --tag latest

      - name: Verify published package
        run: |
          echo "Waiting 30 seconds for NPM to propagate..."
          sleep 30

          echo "Verifying published package..."
          npx kebal@${{ steps.version.outputs.VERSION }} --json >/dev/null
          echo "✓ Published package verified!"
